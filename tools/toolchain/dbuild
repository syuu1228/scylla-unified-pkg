#!/bin/bash

here="$(realpath $(dirname "$0"))"
toplevel="$(realpath "$here/../..")"
group_args=()
docker_args=()
image="$(<"$here/image")"

for gid in $(id -G); do
    group_args+=(--group-add "$gid")
done

interactive=

function help () {
    cat <<EOF 1>&2
NAME
    $(basename $0) - Run a command in scylla's frozen toolchain docker build image.

SYNOPSIS
    $0 [OPTIONS --] [command [arg ...]]

DESCRIPTION
    $(basename $0) is used mainly to build scylla in a docker image containing
    a frozen version of the toolchain.

    When no command is provided, $(basename $0) runs an interactive shell in
    the docker instance.  The image to use is taken by default from "$(dirname $0)/image".
    It may be overriden using the --image option.

    When providing docker options, the options list must be terminated with \`--'.

OPTIONS
   -h | --help
       Print this help message.

   --image [IMAGE]
       Use the specified docker IMAGE.
       If omitted, list the available images using \`docker image ls'

   -i | --interactive
       Run an interactive session.

   See \`docker help run' for available options.
EOF
    exit 0
}

function usage () {
    cat <<EOF 1>&2
$1

Run \`$0 --help' to print the full help message.
EOF
    exit 1
}

if [[ $# -eq 0 ]]; then
    interactive=y
    docker_args=(-it)
elif [[ "$1" = -* ]]; then
    while [[ "$1" != "--" && $# != 0 ]]; do
	case "$1" in
            -h|--help)
                help
                ;;
            --image)
                image="$2"
                shift 2
                if [[ -z "$image" ]]; then
                    exec docker image ls
                fi
                if ! docker image inspect "$image" >/dev/null; then
                    usage
                fi
                continue
                ;;
	    --*)
		if [[ "$1" = --interactive || "$1" = --interactive=true ]]; then
		    interactive=y
		fi
		;;
	    -*)
		if [[ "$1" = -*i* ]]; then
		    interactive=y
		fi
		;;
	    *)
		;;
	esac
	docker_args+=("$1")
	shift
    done
    if [[ "$1" != "--" ]]; then
	usage "Expected '--' to terminate docker flag list"
    fi
    shift
fi

if [[ $# != 0 ]]; then
    args=("$@")
else
    args=(/bin/bash -i)
fi

MAVEN_LOCAL_REPO="$HOME/.m2"

mkdir -p "$MAVEN_LOCAL_REPO"

is_podman="$(docker --help | grep -o podman)"

docker_common_args=()

if [ -z "$is_podman" ]; then
    docker_common_args+=(
       -u "$(id -u):$(id -g)"
       "${group_args[@]}"
       -v /etc/passwd:/etc/passwd:ro
       -v /etc/group:/etc/group:ro
       )
fi

if [ "$PWD" != "$toplevel" ]; then
     docker_common_args+=(-v "$toplevel:$toplevel:z")
fi

# podman cannot relabel system directories like /tmp, but it can
# relable directories we own, so we map a temporary directory to /tmp

tmpdir=$(mktemp -d)

docker_common_args+=(
       --network host \
       --cap-add SYS_PTRACE \
       -v "$PWD:$PWD:z" \
       -v "$tmpdir:/tmp:z" \
       -v "$MAVEN_LOCAL_REPO:$MAVEN_LOCAL_REPO:z" \
       -v /etc/localtime:/etc/localtime:ro \
       -w "$PWD" \
       -e HOME \
       "${docker_args[@]}" \
       "$image" \
       "${args[@]}"
)

if [[ -n "$interactive" || -n "$is_podman" ]]; then
    # If --interactive was given on the command line, we can't run in detached mode
    # as it will be impossible to interact with the container.

    # We also avoid detached mode with podman, which doesn't need it
    # (it does not proxy SIGTERM) and doesn't work well with it.
    docker run --rm "${docker_common_args[@]}"
    ret=$?
    rm -rf "$tmpdir"
    exit $ret
fi

container=$(
    docker run \
       "--detach=true" \
       "${docker_common_args[@]}"
)

kill_it() {
    if [[ -n "$container" ]]; then
        docker rm -f "$container" > /dev/null
        container=
    fi
    rm -rf "$tmpdir"
}

trap kill_it SIGTERM SIGINT SIGHUP EXIT

docker logs --follow "$container"

if [[ -n "$container" ]]; then
    exitcode="$(docker wait "$container")"
else
    exitcode=99
fi

kill_it

trap - SIGTERM SIGINT SIGHUP EXIT

# after "docker kill", docker wait will not print anything
[[ -z "$exitcode" ]] && exitcode=1

exit "$exitcode"
